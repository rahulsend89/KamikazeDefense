package {	import flash.display.*;	import flash.text.TextField;	import flash.events.*;	import flash.utils.getDefinitionByName;	import flash.display.BitmapData;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Rectangle;	//import bar_mc;	import Comman;	import GameClass;	class Clip extends Comman{		var numDoors:Number;		var color:String;		//public var bar:bar_mc;		public var press:Boolean;		public var shoot:Boolean;		public var per:Number;		public var reduceVal:Number;		public var clipAr:Array;		var gunArray:Array = [[3],[3],[1,2,3,4,5],[3],[3]];		var speedArray:Array = [10,20,10,[100],[5]];		var attachArray:Array = ["stack","stack_Machine","stack","stack_Lazer","stack_Fire"];		var num:Number = 0;		public function Clip() {			clipAr = new Array();			reduceVal = 1;			per = 100;			shoot = false;			num = 0;			//bar = new bar_mc();			//bar.name = "bar_mc";			//this.addChild (bar);			this.press  = false;		}		override public function removeS(event:Event):void {			super.removeS(event);			this.removeEventListener(Event.REMOVED_FROM_STAGE , removeS);			this.removeEventListener(Event.ENTER_FRAME , doit);		}		override public function loopUntilRemoved(event:Event):void{			super.loopUntilRemoved(event);			var mainClass = (this.root as MovieClip);			if (!mainClass.main_mc.gamePause) {				var shipbulletholder_mc:MovieClip = mainClass.main_mc.shipbulletholder_mc;				var bar_mc:MovieClip = mainClass.main_mc.clip_meter_mc;				if (event.target.shoot) {					event.target.num++;					var guntype:Number = mainClass.main_mc.guntype;					var Bulletspeed:Number = speedArray[guntype];					var stack_:String = attachArray[guntype];					shootFire((event.target as MovieClip),event.target.clipAr,shipbulletholder_mc,event.target.num,1,guntype,Bulletspeed,stack_);					event.target.shoot = false;				}				//var bar_mc:MovieClip = event.target.getChildByName("bar_mc") as MovieClip;				bar_mc.gotoAndStop(Math.floor ((bar_mc.totalFrames * per) / 100));				if (mainClass.mouseY<=stage.stageHeight-100 && mainClass.mouseY>=30) {					this.y = mainClass.mouseY;				}else if (mainClass.mouseY>stage.stageHeight-100){					this.y = stage.stageHeight-100;				}else if (mainClass.mouseY>30){					this.y = 30;				}				if (event.target.press) {					event.target.press = false;					//per-=reduceVal;				}				if (per<0) {					per == 0;					this.removeEventListener(Event.ENTER_FRAME,doit);						//var _Class:Class = getDefinitionByName("GameClass") as Class;					//var mainClass:MovieClip = new _Class();					//var mainClass:gameMovieClip;					mainClass.main_mc.doit(this);					mainClass.main_mc.gameOver(true);				}				//trace (event.target.press+" : "+event.target.name);			}		}		public function Reduce():void {			press = true;		}		public function mouseout():void {			press = false;		}		public function shootFire(clip_mc:MovieClip, clipar:Array, attach:MovieClip, j:Number, dspeed:Number,gun_type:Number,speed:Number,stack_:String) {			var mainClass = (this.root as MovieClip);			var endVal:Number = gunArray[gun_type].length;			for (var count:Number=1; count<=endVal; count++) {				var _Class:Class=getDefinitionByName(stack_)  as  Class;				var stack:MovieClip=new _Class;				var mc:MovieClip = attach.addChild (stack) as MovieClip;				var newColorTransform:ColorTransform = mc.transform.colorTransform;				newColorTransform.color = 0x0000ff;				//mc.transform.colorTransform = newColorTransform;				mc.name = "stack" + j +""+count+ "_mc";				var point_mc:MovieClip = clip_mc.getChildByName("point"+gunArray[gun_type][count-1]+"_mc") as MovieClip;				mc.x = point_mc.x+clip_mc.x;				mc.y = point_mc.y+clip_mc.y;				mc.rotation = point_mc.rotation - 90;				mc.scale = 100;				mc.temp = 15;				mc.hit = true;				mc.addEventListener(Event.ENTER_FRAME , doit_);				mc.addEventListener(Event.REMOVED_FROM_STAGE,removeEvent_doit_);				this.addEventListener(Event.REMOVED_FROM_STAGE,removeEvent_doit_);				function removeEvent_doit_(e:Event):void {					e.target.removeEventListener(Event.ENTER_FRAME,doit_);				}				function doit_(e:Event):void {					if (this!=null || stage!=null && !mainClass.main_mc.gamePause) {						var angle:Number = (e.target.rotation + 90) * Math.PI / 180;						var xmov:Number = Math.sin (angle) * speed;						var ymov:Number = Math.cos (angle) * speed;						if (e.target.scale > 200) {							e.target.temp *= -1;						}						if (e.target.scale <= 0) {							removeChild(e.target as MovieClip);						}						if (e.target.x > stage.stageWidth || e.target.y > stage.stageHeight-60 || e.target.x < 0 || e.target.y < 0) {							var mc:MovieClip = (e.target.parent as MovieClip);							if (mc!=null) {								mc.removeChild(e.target as MovieClip);							}						}						for (var count:Number = 0; count < clipar.length; count++) {							var clip_mc:MovieClip = clipar[count];							var rect:Rectangle = getCollisionRect ((e.target as DisplayObject), clip_mc,clip_mc.parent,true,255);							if ((rect.width!=0 ||rect.height!=0) && e.target.hit) {								xmov = 0;								ymov = 0;								clip_mc.per -= clip_mc.reduceVal;								//trace(clip_mc.per+" : testing "+clip_mc.reduceVal);								e.target.hit = false;								e.target.gotoAndPlay(2);							}						}						if (e.target.hit) {							e.target.x += xmov;							e.target.y -= ymov;						}					} else {						var mc_:MovieClip = (e.target.parent as MovieClip);						if (mc_!=null) {							e.target.removeEventListener(Event.ENTER_FRAME , doit_);							mc_.removeChild(e.target as MovieClip);						}					}				}			}		}				override public function point(clip1:MovieClip, clip2:MovieClip) {			var main:MovieClip = this.root as MovieClip;			clip1.point_mc.rotation = (Math.atan2 (clip1.y - main.mouseY, clip1.x - main.mouseX) * 180 / Math.PI)-90;			return clip1.rotation;		}	}}