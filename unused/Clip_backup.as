package {	import flash.display.*;	import flash.text.TextField;	import flash.events.*;	import flash.utils.getDefinitionByName;	import flash.display.BitmapData;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Rectangle;	//import bar_mc;	import GameClass;	class Clip extends MovieClip {		var numDoors:Number;		var color:String;		//public var bar:bar_mc;		public var guntype:Number;		public var press:Boolean;		public var shoot:Boolean;		public var per:Number;		public var reduceVal:Number;		public var clipAr:Array;		var gunArray:Array = [[3],[3],[1,2,3,4,5],[3],[3]];		var speedArray:Array = [10,20,10,[100],[5]];		var attachArray:Array = ["stack","stack_Machine","stack","stack_Lazer","stack_Fire"];		var num:Number = 0;		public function Clip() {			guntype = 0;			clipAr = new Array();			reduceVal = 1;			per = 100;			shoot = false;			num = 0;			//bar = new bar_mc();			//bar.name = "bar_mc";			//this.addChild (bar);			this.press  = false;			this.addEventListener(Event.ENTER_FRAME,doit);			this.addEventListener(Event.REMOVED_FROM_STAGE , removeS);		}		public function removeS(event:Event):void {			this.removeEventListener(Event.REMOVED_FROM_STAGE , removeS);			this.removeEventListener(Event.ENTER_FRAME , doit);		}		public function doit(event:Event):void {			var mainClass = (this.root as MovieClip);			var shipbulletholder_mc:MovieClip = mainClass.main_mc.shipbulletholder_mc;			var bar_mc:MovieClip = mainClass.main_mc.clip_meter_mc;			if (event.target.shoot) {				event.target.num++;				//trace(event.target.num+" : ");				shootFire((event.target as MovieClip),event.target.clipAr,shipbulletholder_mc,event.target.num,1,guntype);			}			//var bar_mc:MovieClip = event.target.getChildByName("bar_mc") as MovieClip;			bar_mc.gotoAndStop(Math.floor ((bar_mc.totalFrames * per) / 100));			this.y = mainClass.mouseY;			if (event.target.press) {				event.target.press = false;				//per-=reduceVal;			}			if (per<0) {				per == 0;				this.removeEventListener(Event.ENTER_FRAME,doit);				//var _Class:Class = getDefinitionByName("GameClass") as Class;				//var mainClass:MovieClip = new _Class();				//var mainClass:gameMovieClip;				mainClass.main_mc.doit(this);				mainClass.main_mc.gameOver(true);			}			//trace (event.target.press+" : "+event.target.name);		}		public function Reduce():void {			press = true;		}		public function mouseout():void {			press = false;		}		public function shootFire(clip_mc:MovieClip, clipar:Array, attach:MovieClip, j:Number, dspeed:Number,gun_type:Number) {			var mainClass = (this.root as MovieClip);			for (var count:Number=1; count<=1; count++) {				var stack_:stack = new stack();				var mc:MovieClip = attach.addChild (stack_) as MovieClip;				mc.name = "stack" + j +""+count+ "_mc";				var point_mc:MovieClip = clip_mc.getChildByName("point"+count+"_mc") as MovieClip;				mc.x = clip_mc.x;				mc.y = clip_mc.y;				mc.rotation = clip_mc.point_mc.rotation - 90;				mc.scale = 100;				mc.temp = 15;				mc.hit = true;				//clip_mc.point_mc				point(clip_mc,this.root as MovieClip);				mc.addEventListener(Event.ENTER_FRAME , doit_);				mc.addEventListener(Event.REMOVED_FROM_STAGE,removeEvent_doit_);				//trace(this.clipAr+" : ClipAr");				function removeEvent_doit_(e:Event):void {					e.target.removeEventListener(Event.ENTER_FRAME,doit_);				}				function doit_(e:Event):void {					if (this!=null || stage!=null) {						var angle:Number = (e.target.rotation + 90) * Math.PI / 180;						var xmov:Number = Math.sin (angle) * 10;						var ymov:Number = Math.cos (angle) * 10;						//e.target.x -= (e.target.x - e.target._x) / 1;						//e.target.y -= (e.target.y - e.target._y) / 1;						//e.target.scaleX -= (e.target.scaleX - e.target.scale) / 3;						//e.target.scaleY -= (e.target.scaleY - e.target.scale) / 3;						//e.target.scale += e.target.temp;						//trace ("ship_mc : "+ship_mc+" : "+e.target.point);						if (e.target.scale > 200) {							e.target.temp *= -1;						}						if (e.target.scale <= 0) {							//e.target.hit = false;							//e.target.gotoAndPlay (2);						}						if (e.target.x > stage.stageWidth || e.target.y > stage.stageHeight || e.target.x < 0 || e.target.y < 0) {							//e.target.hit = false;							//e.target.gotoAndPlay (2);							var mc:MovieClip = (e.target.parent as MovieClip);							if (mc!=null) {								//trace("removed : "+e.target.name)								mc.removeChild(e.target as MovieClip);							}						}						for (var count:Number = 0; count < clipar.length; count++) {							var clip_mc:MovieClip = clipar[count];							var rect:Rectangle = new Rectangle(0,0,0,0);							rect = getCollisionRect ((e.target as DisplayObject), clip_mc,mainClass.main_mc,true,255);							//trace(clip_mc+" : ");							if ((rect.width!=0 ||rect.height!=0) && e.target.hit) {								xmov = 0;								ymov = 0;								clip_mc.per -= clip_mc.reduceVal;								e.target.hit = false;								e.target.gotoAndPlay(2);							}						}						if (e.target.hit) {							e.target.x += xmov;							e.target.y -= ymov;						}					} else {						var mc_:MovieClip = (e.target.parent as MovieClip);						if (mc_!=null) {							e.target.removeEventListener(Event.ENTER_FRAME , doit_);							mc_.removeChild(e.target as MovieClip);						}					}				}			}		}		public function getCollisionRect(target1:DisplayObject,target2:DisplayObject,commonParent:DisplayObjectContainer,pixelPrecise:Boolean=false,tolerance:int=255):Rectangle {			var rect1:Rectangle=target1.getBounds(commonParent);			var rect2:Rectangle=target2.getBounds(commonParent);			var intersectionRect:Rectangle=rect1.intersection(rect2);			if (! pixelPrecise) {				return intersectionRect;			}			intersectionRect.x=Math.floor(intersectionRect.x);			intersectionRect.y=Math.floor(intersectionRect.y);			intersectionRect.width=Math.ceil(intersectionRect.width);			intersectionRect.height=Math.ceil(intersectionRect.height);			if (intersectionRect.isEmpty()) {				return intersectionRect;			}			var parentXformInvert:Matrix=commonParent.transform.concatenatedMatrix.clone();			parentXformInvert.invert();			var target1Xform:Matrix=target1.transform.concatenatedMatrix.clone();			target1Xform.concat(parentXformInvert);			var target2Xform:Matrix=target2.transform.concatenatedMatrix.clone();			target2Xform.concat(parentXformInvert);			target1Xform.translate(- intersectionRect.x,- intersectionRect.y);			target2Xform.translate(- intersectionRect.x,- intersectionRect.y);			var bd:BitmapData=new BitmapData(intersectionRect.width,intersectionRect.height,false);			bd.draw(target1,target1Xform,new ColorTransform(1,1,1,1,255,-255,-255,tolerance),BlendMode.NORMAL);			bd.draw(target2,target2Xform,new ColorTransform(1,1,1,1,255,255,255,tolerance),BlendMode.DIFFERENCE);			var overlapRect:Rectangle=bd.getColorBoundsRect(0xffffffff,0xff00ffff);			overlapRect.offset(intersectionRect.x,intersectionRect.y);			return overlapRect;		}		public function point(clip1:MovieClip, clip2:MovieClip) {			var main:MovieClip = this.root as MovieClip;			//if (clip2 == main) {			clip1.point_mc.rotation = (Math.atan2 (clip1.y - main.mouseY, clip1.x - main.mouseX) * 180 / Math.PI)-90;			return clip1.rotation;			//} else {			//clip1.point_mc.rotation = (Math.atan2 (clip1.y - clip2.y, clip1.x - clip2.x) * 180 / Math.PI)-90;			//return clip1.rotation;			//}		}	}}