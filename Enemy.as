package {	import flash.display.MovieClip;	import flash.text.TextField;	import flash.display.*;	import flash.events.*;	import flash.utils.Timer;	import flash.geom.ColorTransform;	import bar_mc;	import GameClass;	import flash.geom.Rectangle;	import Comman;	class Enemy extends Comman {		public var _in_area:Boolean;		public var speed:Number;		var numDoors:Number;		var color:String;		public var bar:bar_mc;		public var press:Boolean;		public var per:Number;		public var reduceVal:Number;		public var _reduceVal:Number;		public var _type:Number;		private var _b:Number;		public var shootVal:Number;		private var shoot:Boolean;		public var removed:Boolean;		private var shipArray:Array;		private var timer:Timer;		private var startShooting_val:Boolean;		public function Enemy() {			shoot = false;			startShooting_val = true;			speed = 1;			_b = 0;			_in_area = false;			removed = false;			_reduceVal = 0.1;			reduceVal = 1;			_type = 0;			shootVal = 0.5;			per = 100;			bar = new bar_mc();			bar.name = "bar_mc";			var holder_mc:MovieClip = this.getChildByName("holder_mc") as MovieClip;			bar.x = holder_mc.x;			bar.y = holder_mc.y;			this.addChild(bar);			this.mouseChildren = false;			this.press  = false;			timer = new Timer(100,4);			timer.addEventListener( TimerEvent.TIMER, doit_timer);			this.addEventListener(Event.ADDED_TO_STAGE,parent_);		}		private function parent_(e:Event):void {			var mainClass = (this.root as MovieClip);			var mc:MovieClip = mainClass.main_mc.holder_mc.getChildByName("ship_mc");			shipArray = new Array(mc);		}		public function doit_timer(e:TimerEvent):void {			if (shoot) {				shoot = false;			} else {				shoot = true;			}		}		override public function loopUntilRemoved(e:Event):void{			var mainClass = (this.root as MovieClip);			if (!mainClass.main_mc.gamePause) {				var bar_mc:MovieClip = e.target.getChildByName("bar_mc") as MovieClip;				bar_mc.gotoAndStop(Math.floor ((bar_mc.totalFrames * per) / 100));				point((e.target as MovieClip),shipArray[0] as MovieClip);				if (e.target.shoot) {					e.target._b++;					//if (e.target._b%3==0) {					shootFire((e.target as MovieClip),shipArray,mainClass.main_mc.bulletholder_mc,e.target._b,1);					//}				}				if (per<=1 && !removed) {					per = 1;					mainClass.main_mc.power_mc.calculate_Power();					removed = true;					mainClass.main_mc.doit(this);				}				if (this._in_area && startShooting_val) {					startShooting_val = false;					timer.start();				}			}		}		public function shootFire(clip_mc:MovieClip, clipar:Array, attach:MovieClip, j:Number, dspeed:Number) {			var mainClass = (this.root as MovieClip);			var stack_:stack_e = new stack_e();			var mc:MovieClip = attach.addChild (stack_) as MovieClip;			var newColorTransform:ColorTransform = mc.transform.colorTransform;			newColorTransform.color = 0xff0000;			//mc.transform.colorTransform = newColorTransform;			mc.name = "stack" + j + "_mc";			mc.x = clip_mc.x;			mc.y = clip_mc.y;			mc.rotation = clip_mc.point_mc.rotation - 90;			mc.scale = 100;			mc.temp = 15;			mc.hit = true;			//trace(clip_mc+" : clip_mc :"+clipar[0]+" : ");			mc.addEventListener(Event.ENTER_FRAME , doit_);			mc.addEventListener(Event.REMOVED_FROM_STAGE,removeEvent_doit_);			//trace(this.clipAr+" : ClipAr");			function removeEvent_doit_(e:Event):void {				e.target.removeEventListener(Event.ENTER_FRAME,doit_);			}			function doit_(e:Event):void {				if (stage!=null&& !mainClass.main_mc.gamePause) {					if (this!=null) {						var angle:Number = (e.target.rotation + 90) * Math.PI / 180;						var xmov:Number = Math.sin (angle) * 10;						var ymov:Number = Math.cos (angle) * 10;						//e.target.x -= (e.target.x - e.target._x) / 1;						//e.target.y -= (e.target.y - e.target._y) / 1;						//e.target.scaleX -= (e.target.scaleX - e.target.scale) / 3;						//e.target.scaleY -= (e.target.scaleY - e.target.scale) / 3;						//e.target.scale += e.target.temp;						//trace ("ship_mc : "+ship_mc+" : "+e.target.point);						if (e.target.scale > 200) {							e.target.temp *= -1;						}						if (e.target.scale <= 0) {							//e.target.hit = false;							//e.target.gotoAndPlay (2);						}						//trace((e.target!=null)+" : "+(stage!=null));						if (e.target.x > stage.stageWidth || e.target.y > stage.stageHeight || e.target.x < 0 || e.target.y < 0) {							//e.target.hit = false;							//e.target.gotoAndPlay (2);							var mc:MovieClip = (e.target.parent as MovieClip);							if (mc!=null) {								//trace("removed : "+e.target.name)								mc.removeChild(e.target as MovieClip);							}						}						for (var count:Number = 0; count < clipar.length; count++) {							var clip_mc:MovieClip = clipar[count];							var rect:Rectangle = new Rectangle(0,0,0,0);							rect = getCollisionRect ((e.target as DisplayObject), clip_mc,mainClass.main_mc,true,255);							//trace(clip_mc+" : ");							if ((rect.width!=0 ||rect.height!=0) && e.target.hit) {								xmov = 0;								ymov = 0;								//clip_mc.recudeVal = reduceVal;								//trace(mainClass.main_mc.power_Shield+" : mainClass.main_mc.power_Shield");								if (!mainClass.main_mc.power_Shield) {									clip_mc.per -= 1;									//clip_mc.per -= shootVal;								}								e.target.hit = false;								e.target.gotoAndPlay(2);							}						}						if (e.target.hit) {							e.target.x += xmov;							e.target.y -= ymov;						}					}				} else {					var mc_:MovieClip = (e.target.parent as MovieClip);					if (mc_!=null) {						e.target.removeEventListener(Event.ENTER_FRAME , doit_);						mc_.removeChild(e.target as MovieClip);					}				}			}		}	}}